---
- hosts: localhost
  connection: local
  gather_facts: True

  tasks:
    - name: NSX-T Overlay Transport Zone
      nsxt_transport_zone:
        display_name: "{{ hostvars['localhost'].overlay_tz_name }}"
        description: "Ansible created TZ for Overlay Traffic"
        host_switch_name: "{{ hostvars['localhost'].overlay_hostswitch }}"
        transport_type: 'OVERLAY'
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      register: overlay_tzone

    - name: NSX-T IP Block
      nsxt_ip_block:
        display_name: "{{ item.name }}"
        description: "IP Block created by Ansible"
        cidr: "{{ item.cidr }}"
        #tags: "{item.tags}"
        tags: "{{ item.tags if item.tags is defined else { 'test-tagA': 'test-valA'}  }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: container_ip_blocks is defined
      register: ipblocks
      with_items: "{{ container_ip_blocks }}"

    - name: NSX-T External IP Pools
      nsxt_ip_pool:
        display_name: "{{ item.name }}"
        description: "External IP Pool for Containers"
        subnets:
          - cidr: "{{ item.cidr }}"
            allocation_ranges:
              - "{{ item.start }}-{{item.end}}"
            gateway_ip: "{{ item.gateway }}"
            #dns_nameservers:
            #  - "{ item.nameserver }"
            #dns_suffix: "{ item.dns_domain }"
        #tags: "{item.tags}"
        tags: "{{ item.tags if item.tags is defined else { 'test-tagA': 'test-valA'}  }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: external_ip_pools is defined
      register: external_ip_pools
      with_items: "{{ external_ip_pools }}"

    - name: NSX-T T0 Logical Router
      nsxt_t0_logical_router:
        display_name: "{{ t0_router.name }}"
        description: "Default T0"
        edge_cluster_id: "{{ edge_cluster.id }}" # Comes from previous run configure_nsx.yml
        high_availability_mode: "{{ t0_router.ha_mode }}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      register: t0

    - name: NSX-T T1 Logical Router
      nsxt_t1_logical_router:
        display_name: "{{ item.name}}"
        description: "{{ item.name}}"
        edge_cluster_id: "{{ edge_cluster.id }}"                    # Comes from previous run configure_nsx.yml
        pinned_to_edges: "{{ item.pinned_to_edges|default(omit) }}" # Pin to edge only for those requesting it
        connected_t0_id: "{{ t0.id }}"
        #tags: "{{ t0_router.tags }}"
        advertise:
          enabled: True
          advertise_lb_snat_ip: False
          advertise_lb_vip: True
          advertise_nat_routes: True
          advertise_nsx_connected_routes: True
          advertise_static_routes: False
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
        #include: configure_nsx_logical_switch.yml t1="{{t1}}" overlay_tzone_id="{{ overlay_tzone.id}}"
      register: t1
      with_items: "{{ t1_routers }}"

    # Save the t1 router ids with their names to use for downlink router port creation
    - set_fact:
        t1_router_ids: "{{ t1_router_ids|default([]) | combine ( {item.invocation.module_args.display_name: item.id } ) }}"
      with_items: "{{ t1.results }}"

    #- debug: msg="{{t1_router_ids}}"

    - name: NSX-T Logical Switch and Port
      block:
      - name: NSX-T Logical Switch
        nsxt_logical_switch:
          display_name: "{{ item.1.name }}"
          description: "{{ item.1.name }}"
          transport_zone_id: "{{ overlay_tzone.id }}"
          tags: "{{ t0_router.tags }}"
          state: present
          nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
          nsx_username: 'admin'
          nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
        register: lsswitch
        with_subelements: # Iterate over the logical switches
        - "{{ t1_routers }}"
        - switches

# Sample result
# "changed": true,
# "failed": false,
# "id": "67a2f204-6ead-4f2a-a466-aea805823106",
# "invocation": {
#     "module_args": {
#         "admin_state": "UP",
#         "description": "InfraLogicalSwitch",
#         "display_name": "InfraLogicalSwitch",
#         "ip_pool_id": null,
#         "mac_pool_id": null,
#         "nsx_manager": "10.193.162.50",
#         "nsx_passwd": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER",
#         "nsx_username": "admin",
#         "replication_mode": "MTEP",
#         "state": "present",
#         "switching_profile_ids": null,
#         "tags": {
#             "ncp/cluster": "pcf2.0"
#         },
#         "transport_zone_id": "e985be2a-da67-4ffd-8017-3cb4022c5a34",
#         "vlan": null
#     }
# },
#   "item": [
#       {
#           "name": "T1Router-Mgmt"
#       },
#       {
#           "name": "InfraLogicalSwitch",
#           "logical_switch_gw": "192.168.10.1",
#           "subnet_mask": 26
#       }
#   ],

      #- debug: msg="{{ lsswitch.results }}"

      - name: NSX-T Logical Switch Port
        nsxt_logical_switch_port:
          display_name: "{{ item.item.1.name}} Port"
          description: "{{ item.item.1.name}} Port"
          logical_switch_id: "{{ item.id }}"
          tags: "{{ t0_router.tags }}"
          state: present
          nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
          nsx_username: 'admin'
          nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
        register: lsp
        with_items: "{{ lsswitch.results}}"

# Sample result from lsp
# ok: [localhost] => {
#     "msg": {
#         "changed": true,
#         "failed": false,
#         "id": "858810ce-a6aa-4007-b918-fcb3f56bedf2",
#         "invocation": {
#             "module_args": {
#                 "admin_state": "UP",
#                 "description": "InfraLogicalSwitch Port",
#                 "display_name": "InfraLogicalSwitch Port",
#                 "logical_switch_id": "67a2f204-6ead-4f2a-a466-aea805823106",
#                 "nsx_manager": "10.193.162.50",
#                 "nsx_passwd": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER",
#                 "nsx_username": "admin",
#                 "state": "present",
#                 "switching_profile_ids": null,
#                 "tags": {
#                     "ncp/cluster": "pcf2.0"
#                 }
#             }
#         },
#         "item": {
#             "changed": true,
#             "failed": false,
#             "id": "67a2f204-6ead-4f2a-a466-aea805823106",
#             "invocation": {
#                 "module_args": {
#                     "admin_state": "UP",
#                     "description": "InfraLogicalSwitch",
#                     "display_name": "InfraLogicalSwitch",
#                     "ip_pool_id": null,
#                     "mac_pool_id": null,
#                     "nsx_manager": "10.193.162.50",
#                     "nsx_passwd": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER",
#                     "nsx_username": "admin",
#                     "replication_mode": "MTEP",
#                     "state": "present",
#                     "switching_profile_ids": null,
#                     "tags": {
#                         "ncp/cluster": "pcf2.0"
#                     },
#                     "transport_zone_id": "e985be2a-da67-4ffd-8017-3cb4022c5a34",
#                     "vlan": null
#                 }
#             },
#             "item": [
#                 {
#                     "name": "T1Router-Mgmt"
#                 },
#                 {
#                     "name": "InfraLogicalSwitch",
#                     "logical_switch_gw": "192.168.10.1",
#                     "subnet_mask": 26
#                 }
#             ],
#             "message": "Logical Switch with name InfraLogicalSwitch created!",
#             "object_name": "InfraLogicalSwitch"
#         },
#         "message": "Logical Switch Port with name InfraLogicalSwitch Port created!",
#         "object_name": "InfraLogicalSwitch Port"
#     }
# }

      #- debug: msg="{{ lsp.results[0]}}"

# Sample output of lsp.results
# ok: [localhost] => {
#     "msg": {
#         "changed": true,
#         "failed": false,
#         "id": "858810ce-a6aa-4007-b918-fcb3f56bedf2",
#         "invocation": {
#             "module_args": {
#                 "admin_state": "UP",
#                 "description": "InfraLogicalSwitch Port",
#                 "display_name": "InfraLogicalSwitch Port",
#                 "logical_switch_id": "67a2f204-6ead-4f2a-a466-aea805823106",
#                 "nsx_manager": "10.193.162.50",
#                 "nsx_passwd": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER",
#                 "nsx_username": "admin",
#                 "state": "present",
#                 "switching_profile_ids": null,
#                 "tags": {
#                     "ncp/cluster": "pcf2.0"
#                 }
#             }
#         },
#         "item": {
#             "changed": true,
#             "failed": false,
#             "id": "67a2f204-6ead-4f2a-a466-aea805823106",
#             "invocation": {
#                 "module_args": {
#                     "admin_state": "UP",
#                     "description": "InfraLogicalSwitch",
#                     "display_name": "InfraLogicalSwitch",
#                     "ip_pool_id": null,
#                     "mac_pool_id": null,
#                     "nsx_manager": "10.193.162.50",
#                     "nsx_passwd": "VALUE_SPECIFIED_IN_NO_LOG_PARAMETER",
#                     "nsx_username": "admin",
#                     "replication_mode": "MTEP",
#                     "state": "present",
#                     "switching_profile_ids": null,
#                     "tags": {
#                         "ncp/cluster": "pcf2.0"
#                     },
#                     "transport_zone_id": "e985be2a-da67-4ffd-8017-3cb4022c5a34",
#                     "vlan": null
#                 }
#             },
#             "item": [
#                 {
#                     "name": "T1Router-Mgmt"
#                 },
#                 {
#                     "name": "InfraLogicalSwitch",
#                     "logical_switch_gw": "192.168.10.1",
#                     "subnet_mask": 26
#                 }
#             ],
#             "message": "Logical Switch with name InfraLogicalSwitch created!",
#             "object_name": "InfraLogicalSwitch"
#         },
#         "message": "Logical Switch Port with name InfraLogicalSwitch Port created!",
#         "object_name": "InfraLogicalSwitch Port"
#     }
# }



      #- debug: msg="{{lsp.results[0].item.item}}" # To get the t1_router structure with router & logical switch name
# Sample output
# ok: [localhost] => {
#     "msg": [
#         {
#             "name": "T1Router-Mgmt"
#         },
#         {
#             "name": "InfraLogicalSwitch",
#             "logical_switch_gw": "192.168.10.1",
#             "subnet_mask": 26
#         }
#     ]
# }

      #- debug: msg="{{lsp.results[0].item.item.0.name}}" # To get the T1 router name
# Sample output
# ok: [localhost] => {
#     "msg": "T1Router-Mgmt"
# }

      #- debug: msg="{{ lsp.results[0].item.item.1.name}}" # To get the logical switch name
# Sample output
# ok: [localhost] => {
#     "msg": "InfraLogicalSwitch"
# }

      # lsp.results -> item becomes outermost item.
      - name: NSX-T Logical Router Downlink Port
        nsxt_logical_router_downlink_port:
          display_name: "{{item.item.item.1.name}} Router Downlink Port"
          description: "{{ item.item.item.1.name}} Router Downlink Port"
          logical_router_id: "{{ t1_router_ids[item.item.item.0.name] }}" # Use the T1 Router name and get its id
          linked_logical_switch_port_id: "{{ item.id }}"
          subnets:
            - ip_addresses: [ "{{ item.item.item.1.logical_switch_gw}}" ]
              prefix_length: "{{ item.item.item.1.subnet_mask}}"
          tags: "{{ t0_router.tags }}"
          state: present
          nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
          nsx_username: 'admin'
          nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
        register: lrdp
        with_items: "{{ lsp.results }}"

    # - name: Remove previous SSH keys from known_hosts - NSX nodes
    #   command: ssh-keygen -R "{{ hostvars[item]['ansible_ssh_host'] }}"
    #   register: command_result
    #   failed_when: "command_result.rc > 0 and command_result.rc != 255"
    #   with_items: "{{ groups['nsxtransportnodes'] }}"
    #   when: groups['nsxtransportnodes'] is defined
    # - name: add host to known_hosts - Managers
    #   shell: mkdir -p ~/.ssh; ssh-keyscan -H "{{ hostvars[item]['ansible_ssh_host'] }}" >> ~/.ssh/known_hosts
    #   with_items: "{{ groups['nsxtransportnodes'] }}"
    #   when: groups['nsxtransportnodes'] is defined
