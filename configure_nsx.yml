---
- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: NSX-T Overlay Transport Zone
      nsxt_transport_zone:
        display_name: "{{ hostvars['localhost'].overlay_tz_name }}"
        description: "Ansible created TZ for Overlay Traffic"
        host_switch_name: "{{ hostvars['localhost'].overlay_hostswitch }}"
        transport_type: 'OVERLAY'
        tags:
          ncp/cluster: "{{ hostvars['localhost'].tag }}"
          ncp/shared_resource: 'true'
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: hostvars['localhost'].overlay_tz_name is defined
      register: overlay_tzone

    - name: NSX-T VLAN Transport Zone
      nsxt_transport_zone:
        display_name: "{{ hostvars['localhost'].vlan_tz_name }}"
        description: "Ansible created TZ for VLAN Traffic"
        host_switch_name: "{{ hostvars['localhost'].vlan_hostswitch }}"
        transport_type: 'VLAN'
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: hostvars['localhost'].vlan_tz_name is defined
      register: vlan_tzone

    # - name: NSX-T VLAN Transport Zone for Edge Uplink
    #   nsxt_transport_zone:
    #     display_name: "{{ hostvars['localhost'].edge_vlan_tz_name }}"
    #     description: "Ansible created TZ for VLAN Traffic"
    #     host_switch_name: "{{ hostvars['localhost'].vlan_hostswitch }}"
    #     transport_type: 'VLAN'
    #     state: present
    #     nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
    #     nsx_username: 'admin'
    #     nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
    #   when: hostvars['localhost'].vlan_tz_name is defined
    #   register: edge_vlan_tzone

    - name: NSX-T TEP IP Pool
      nsxt_ip_pool:
        display_name: "{{ hostvars['localhost'].tep_pool_name }}"
        description: "IP Pool for GENEVE Overlay Traffic"
        subnets:
          - cidr: "{{ hostvars['localhost'].tep_pool_cidr }}"
            allocation_ranges:
              - "{{ hostvars['localhost'].tep_pool_range }}"
            #dns_nameservers:
            #  - "{ hostvars['localhost'].tep_pool_nameserver }"
            #dns_suffix: "{ hostvars['localhost'].tep_pool_suffix }"
            gateway_ip: "{{ hostvars['localhost'].tep_pool_gw }}"
        tags:
          ncp/cluster: "{{ hostvars['localhost'].tag }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: hostvars['localhost'].tep_pool_name is defined
      register: tepippool

    - name: Single Uplink Profile
      nsxt_uplink_profile:
        display_name: "{{ hostvars['localhost'].edge_single_uplink_profile_name }}"
        description: "Edge Uplink Profile"
        mtu: "{{ hostvars['localhost'].edge_single_uplink_profile_mtu }}"
        active_list:
          - uplink-1
        policy: "FAILOVER_ORDER"
        transport_vlan: "{{ hostvars['localhost'].edge_single_uplink_profile_vlan }}"
        tags:
          ncp/cluster: "{{ hostvars['localhost'].tag }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      register: single_uplink_prof
      when: hostvars['localhost'].edge_single_uplink_profile_name is defined

    - name: Host Overlay Profile
      nsxt_uplink_profile:
        display_name: "{{ hostvars['localhost'].esxi_overlay_profile_name }}"
        description: "Host Overlay Profile"
        mtu: "{{ hostvars['localhost'].esxi_overlay_profile_mtu }}"
        active_list:
          - uplink-1
          - uplink-2
        policy: "LOADBALANCE_SRCID"
        transport_vlan: "{{ hostvars['localhost'].esxi_overlay_profile_vlan }}"
        tags:
          ncp/cluster: "{{ hostvars['localhost'].tag }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: hostvars['localhost'].esxi_overlay_profile_name is defined and groups['nsxtransportnodes'] is defined
      register: host_overlay_prof

    - name: Host Overlay Profile
      nsxt_uplink_profile:
        display_name: "{{ hostvars['localhost'].esxi_overlay_profile_name }}-{{item.0.vcenter_name}}-{{item.1.vcenter_cluster}}"
        description: "Host Overlay Profile"
        mtu: "{{ item.1.overlay_profile_mtu }}"
        active_list:
          - uplink-1
          - uplink-2
        policy: "LOADBALANCE_SRCID"
        transport_vlan: "{{ item.1.overlay_profile_vlan }}"
        tags:
          ncp/cluster: "{{ hostvars['localhost'].tag }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: groups['nsxtransportnodes'] is not defined
      register: host_overlay_prof
      with_subelements: # Iterate over the logical switches
      - "{{ compute_managers }}"
      - clusters



    - name: NSX-T Edge Transport Node
      nsxt_transport_node:
        display_name: "{{ item }}"
        node_name: "{{ item }}"
        # static_ip_pool_id: "{{ tepippool.id }}"
        # host_switch_name:
        #   - "{{ hostvars['localhost'].overlay_hostswitch }}"
        #   - "{{ hostvars['localhost'].vlan_hostswitch }}"
        # pnics: "{{ edge_uplink_vmnics }}"
        # uplink_profile: "{{ hostvars['localhost'].edge_single_uplink_profile_name }}"
        transport_zone_endpoints:
          - "{{ hostvars['localhost'].overlay_tz_name }}"
          - "{{ hostvars['localhost'].vlan_tz_name }}"
        host_switch:
          - name: "{{ hostvars['localhost'].overlay_hostswitch }}"
            pnics:
              uplink-1: "{{ hostvars['localhost'].edge_interface }}"
            uplink_profile: "{{ hostvars['localhost'].edge_single_uplink_profile_name }}"
            static_ip_pool_id: "{{ tepippool.id }}"
          - name: "{{ hostvars['localhost'].vlan_hostswitch }}"
            pnics:
              uplink-1: "{{ hostvars['localhost'].edge_uplink_interface }}"
            uplink_profile: "{{ hostvars['localhost'].edge_single_uplink_profile_name }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      with_items: "{{ groups['nsxedges'] }}"
      when: groups['nsxedges'] is defined
      register: edgetnode

    - name: NSX-T Edge Cluster
      nsxt_edge_cluster:
        display_name: "{{ hostvars['localhost'].edge_cluster }}"
        description: "Default Edge Cluster"
        members: "{{ groups['nsxedges'] }}"
        tags:
          ncp/cluster: "{{ hostvars['localhost'].tag }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: hostvars['localhost'].edge_cluster is defined
      register: edge_cluster

    - name: NSX-T T0 Logical Router
      nsxt_t0_logical_router:
        display_name: "{{t0_router.name}}"
        description: "Default T0 Router {{t0_router.name}}"
        edge_cluster_id: "{{ edge_cluster.id }}"
        high_availability_mode: "{{ t0_router.ha_mode }}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.name is defined
      register: t0

    - name: NSX-T VLAN Logical Switch for t0 uplink
      nsxt_logical_switch:
        display_name: "uplink-{{ t0_router.name }}-{{ t0_router.vlan_uplink }}"
        description: "T0 Uplink VLAN Logical Switch"
        transport_zone_id: "{{ vlan_tzone.id }}"
        vlan: "{{ t0_router.vlan_uplink }}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.vlan_uplink is defined
      register: uplink_ls

    - name: NSX-T Logical Switch Port for uplink1
      nsxt_logical_switch_port:
        display_name: "to_{{ t0_router.name}}_uplink1"
        description: "Logical Switch Port"
        logical_switch_id: "{{ uplink_ls.id }}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.vlan_uplink is defined
      register: uplink_lsp

    - name: NSX-T T0 Uplink 1
      nsxt_t0_uplink:
        display_name: "uplink-{{ t0_router.name}}-1"
        description: "{{ t0_router.name}} T0 Uplink"
        edge_cluster_member: "{{ groups['nsxedges'][t0_router.edge_indexes.primary - 1] if t0_router.edge_indexes is defined else groups['nsxedges'][0] }}"
        urpf: 'NONE'
        t0_router: "{{ t0_router.name }}"
        logical_switch_port_id: "{{ uplink_lsp.id }}"
        ip_address: "{{ t0_router.ip1}}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.vlan_uplink is defined
      register: t0uplink1

    - name: NSX-T Logical Switch Port for uplink2
      nsxt_logical_switch_port:
        display_name: "to_{{ t0_router.name}}_uplink2"
        description: "Logical Switch Port"
        logical_switch_id: "{{ uplink_ls.id }}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.vlan_uplink is defined
      register: uplink_lsp2

    - name: NSX-T T0 Uplink 2
      nsxt_t0_uplink:
        display_name: "uplink-{{ t0_router.name}}-2"
        description: "{{ t0_router.name}} T0 Uplink"
        edge_cluster_member: "{{ groups['nsxedges'][t0_router.edge_indexes.secondary - 1] if t0_router.edge_indexes is defined else groups['nsxedges'][1] }}"
        urpf: 'NONE'
        t0_router: "{{ t0_router.name}}"
        logical_switch_port_id: "{{ uplink_lsp2.id }}"
        ip_address: "{{ t0_router.ip2}}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.vlan_uplink is defined
      register: t0uplink2

    - name: NSX-T T0 HA VIP
      nsxt_t0_ha_vip:
        vip_address: "{{ t0_router.vip}}"
        enabled: True
        t0_router: "{{ t0_router.name }}"
        redundant_uplink_port_ids:
          - "{{ t0uplink1.id }}"
          - "{{ t0uplink2.id }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: t0_router.vlan_uplink is defined
      register: havip


    - name: NSX-T T0 Default Static route
      nsxt_static_route:
        description: "NSX-T {{ t0_router.name}} Static route"
        network: "{{t0_router.static_route.network}}"
        next_hops:
        - "{{ t0_router.static_route.next_hop }}"
        admin_distance: "{{t0_router.static_route.admin_distance}}"
        router_name: "{{t0_router.name}}"
        tags: "{{ t0_router.tags }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: "admin"
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      register: stroute

    - name: Remove previous SSH keys from known_hosts - ESXi hosts
      command: ssh-keygen -R "{{ hostvars[item]['ansible_ssh_host'] }}"
      register: command_result
      failed_when: "command_result.rc > 0 and command_result.rc != 255"
      with_items: "{{ groups['nsxtransportnodes'] }}"
      when: groups['nsxtransportnodes'] is defined
    - name: add host to known_hosts - ESXi hosts
      shell: mkdir -p ~/.ssh; ssh-keyscan -H "{{ hostvars[item]['ansible_ssh_host'] }}" >> ~/.ssh/known_hosts
      with_items: "{{ groups['nsxtransportnodes'] }}"
      when: groups['nsxtransportnodes'] is defined

- name: Get ESX nodes information
  hosts: nsxtransportnodes
  gather_facts: True
  tasks:
    - name: Get SHA-256 SSL thumbprint
      command: openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout
      when:
        - ansible_distribution == "VMkernel"
      register: thumb
    - name: Set ssl thumbprint fact
      set_fact:
        sslthumb: "{{ thumb.stdout|regex_findall('Fingerprint=(.*)') }}"
      when:
        - ansible_distribution == "VMkernel"

- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: NSX-T Fabric Node
      nsxt_fabric_node:
        display_name: "{{ item }}"
        ip_address: "{{ hostvars[item].ansible_ssh_host }}"
        node_username: "{{ hostvars[item].ansible_ssh_user }}"
        node_passwd: "{{ hostvars[item].ansible_ssh_pass }}"
        thumbprint: "{{ hostvars[item].sslthumb[0] }}"
        os_type: "ESXI"
        os_version: "6.5.0"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      with_items: "{{ groups['nsxtransportnodes'] }}"
      when: groups['nsxtransportnodes'] is defined
      register: fnode
      async: 7200
      poll: 0

    - name: Wait 3 minutes before checking for Fabric status
      when: "groups['nsxtransportnodes'] is defined"
      pause: minutes=3

    - name: Check Fabric Node Status
      async_status: jid={{ item.ansible_job_id }}
      register: job_result
      until: job_result.finished
      with_items: "{{ fnode.results }}"
      when: groups['nsxtransportnodes'] is defined
      retries: 100
      ignore_errors: True

    #- debug: msg="{{job_result.results}}"

    - name: Check for Fabric Node Status failed
      set_fact: failed_flag=failed
      when: "groups['nsxtransportnodes'] is defined and ((item.msg is defined and 'already exists' not in item.msg and 'FAILED' in item.msg) or (item.message is defined and 'already exists' not in item.message and item.stderr is defined and 'FAILED' in item.stderr) )"
      with_items:
      - "{{ job_result.results }}"

    - fail: msg="Check Fabric Node Status Failed"
      when: failed_flag is defined

    - name: NSX-T Esxi Transport Node
      nsxt_transport_node:
        display_name: "{{ item }}"
        node_name: "{{ item }}"
        # static_ip_pool_id: "{{ tepippool.id }}"
        # host_switch_name:
        #   - "{{ hostvars['localhost'].overlay_hostswitch }}"
        # transport_zone_endpoints:
        #   - "{{ hostvars['localhost'].overlay_tz_name }}"
        # pnics: "{{ esxi_uplink_vmnics }}"
        # uplink_profile: "{{ hostvars['localhost'].esxi_overlay_profile_name }}"
        transport_zone_endpoints:
          - "{{ hostvars['localhost'].overlay_tz_name }}"
          # Commenting off the vlan transport as its not required for esxi - check
          #- "{{ hostvars['localhost'].vlan_tz_name }}"
        host_switch:
          - name: "{{ hostvars['localhost'].overlay_hostswitch }}"
            static_ip_pool_id: "{{ tepippool.id }}"
            # pnics:
            #   uplink-1: "hostvars[item]['uplink-1']"
            #   uplink-2: "hostvars[item]['uplink-2']"
            pnics: "{{ esxi_uplink_vmnics }}"
            uplink_profile: "{{ hostvars['localhost'].esxi_overlay_profile_name }}"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      with_items: "{{ groups['nsxtransportnodes'] }}"
      when: groups['nsxtransportnodes'] is defined
      register: tnode

    - name: Check for Esxi Transport Node Status failed
      set_fact: failed_flag=failed
      when: "groups['nsxtransportnodes'] is defined and ((item.msg is defined and 'already exists' not in item.msg and 'FAILED' in item.msg) or (item.message is defined and 'already exists' not in item.message and item.stderr is defined and 'FAILED' in item.stderr) )"
      with_items:
      - "{{ tnode.results }}"

    - fail: msg="Check Esxi Transport Node Status Failed"
      when: failed_flag is defined

    - name: NSX-T vCenter Compute Managers
      nsxt_compute_manager:
        display_name: "{{ item.vcenter_name }}"
        server: "{{ item.vcenter_host }}"
        username: "{{ item.vcenter_usr }}"
        passwd: "{{ item.vcenter_pwd }}"
        origin_type: "vCenter"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: compute_managers is defined and groups['nsxtransportnodes'] is not defined
      register: vcenter_compute_managers
      ignore_errors: True
      with_items: "{{ compute_managers }}"

    - name: NSX-T Add Compute Manager Clusters
      nsxt_cm_cluster:
        display_name: "{{ item.1.vcenter_cluster }}"
        cm_name: "{{ item.0.vcenter_name }}"
        auto_install_nsx: True
        create_transport_node: True
        transport_zone_endpoints:
          - "{{ hostvars['localhost'].overlay_tz_name }}"
        host_switch:
          - name: "{{ hostvars['localhost'].overlay_hostswitch }}"
            static_ip_pool_id: "{{ tepippool.id }}"
            pnics: "{{ item.1.uplink_vmnics }}" # Split the comma into correct pnic_list
            uplink_profile: "{{ hostvars['localhost'].esxi_overlay_profile_name}}-{{item.0.vcenter_name}}-{{item.1.vcenter_cluster}}"
            # pnics:
            #   uplink-1: "{ hostvars['localhost']['uplink-1'] }"
            #   uplink-2: "{ hostvars['localhost']['uplink-2'] }"
            # uplink_profile: "{ hostvars['localhost'].esxi_uplink_profile_name }"
        state: present
        nsx_manager: "{{ hostvars['nsx-manager'].ansible_ssh_host }}"
        nsx_username: 'admin'
        nsx_passwd: "{{ hostvars['nsx-manager'].ansible_ssh_pass }}"
      when: compute_managers is defined and groups['nsxtransportnodes'] is not defined
      register: cmclusters
      with_subelements: # Iterate over the compute managers
      - "{{ compute_managers }}"
      - clusters


    # - name: NSX-T Compute Manager
    #   nsxt_compute_manager:
    #     display_name: "{ hostvars['localhost'].compute_vcenter_manager }"
    #     server: "{ hostvars['localhost'].compute_vcenter_host }"
    #     username: "{ hostvars['localhost'].compute_vcenter_user }"
    #     passwd: "{ hostvars['localhost'].compute_vcenter_password }"
    #     origin_type: "vCenter"
    #     state: present
    #     nsx_manager: "{ hostvars['nsx-manager'].ansible_ssh_host }"
    #     nsx_username: 'admin'
    #     nsx_passwd: "{ hostvars['nsx-manager'].ansible_ssh_pass }"
    #   when: hostvars['localhost'].compute_vcenter_manager is defined and groups['nsxtransportnodes'] is not defined
    #   register: cmp_manager
    #   ignore_errors: True
    #
    # - name: NSX-T Compute Manager Cluster
    #   nsxt_cm_cluster:
    #     display_name: "{ hostvars['localhost'].compute_vcenter_cluster }"
    #     cm_name: "{ hostvars['localhost'].compute_vcenter_manager }"
    #     auto_install_nsx: True
    #     create_transport_node: True
    #     transport_zone_endpoints:
    #       - "{ hostvars['localhost'].overlay_tz_name }"
    #     host_switch:
    #       - name: "{ hostvars['localhost'].overlay_hostswitch }"
    #         static_ip_pool_id: "{ tepippool.id }"
    #         pnics: "{ esxi_uplink_vmnics }"
    #         uplink_profile: "{ hostvars['localhost'].esxi_overlay_profile_name }"
    #         # pnics:
    #         #   uplink-1: "{ hostvars['localhost']['uplink-1'] }"
    #         #   uplink-2: "{ hostvars['localhost']['uplink-2'] }"
    #         # uplink_profile: "{ hostvars['localhost'].esxi_uplink_profile_name }"
    #     state: present
    #     nsx_manager: "{ hostvars['nsx-manager'].ansible_ssh_host }"
    #     nsx_username: 'admin'
    #     nsx_passwd: "{ hostvars['nsx-manager'].ansible_ssh_pass }"
    #   when: groups['nsxtransportnodes'] is not defined
    #   register: cmcluster
